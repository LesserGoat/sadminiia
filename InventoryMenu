package sample;

import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.time.LocalDateTime;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import javafx.scene.layout.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.PieChart.Data;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Collections;
import java.io.FileWriter;
import java.util.ArrayList;
import java.io.File;
import java.io.Writer;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

import javafx.scene.control.*;

public class InventoryMenu {
    public InventoryMenu(){
        ArrayList<Food> str = new ArrayList<Food>();
        ArrayList<Food> searchList = new ArrayList<Food>();
        ArrayList<String> chartString = new ArrayList<String>();
        ArrayList<Integer> chartInteger = new ArrayList<Integer>();

        //create primary Stage
        Stage primaryStage = new Stage();

        //create second stage
        Stage secondStage = new Stage();

        //Create Third Stage
        Stage thirdStage = new Stage();

        //Create Fourth Stage
        Stage fourthStage = new Stage();

        //gridpane roots
        GridPane root = new GridPane();
        GridPane inventory = new GridPane();
        ScrollPane scrollableInventory = new ScrollPane(inventory);
        GridPane inventorySearch = new GridPane();
        ScrollPane scrollableInventorySearch = new ScrollPane(inventory);

        //main root
        TextField nameText = new TextField();
        Label nameLabel = new Label("Destination:");
        //Numbers
        Button returnButton = new Button();
        Label returnLabel = new Label("Set Return Time:");
        Button exitButton = new Button();
        Label exitLabel = new Label("Set Exit Time:");


        Button  SubmitB = new Button("submit");
        Button  viewInventoryB = new Button("View Inventory");
        Button  viewChartB = new Button("View Count Chart");
        Button  inventoryBack = new Button("Back");
        root.add(nameLabel,0,0);
        root.add(nameText,1,0);
        root.add(exitLabel,0,1);
        root.add(exitButton,1,1);
        root.add(returnLabel,0,2);
        root.add(returnButton,1,2);
        root.add(SubmitB,0,3);
        root.add(viewInventoryB,1,3);



        inventoryBack.setOnAction(value ->
        {
            new HomeMenu(primaryStage);
        });

        SubmitB.setOnAction(value ->
        {
            str.removeAll(str);// when using an arraylist that I have used before....I remove ALL of them and then
            String name = nameText.getText();
            int exitTime = TimeStorage.getExit();
            int entranceTime = TimeStorage.getReturn();


            Food foodItem = new Food(nameText.getText(), exitTime, entranceTime);
            str.add(foodItem);
            try{
                Writer w = new FileWriter(UsernameStorage.getUserName()+ContainerNameStorage.getContainerName()+".txt", true);
                for (int i = 0;i<str.size();i++)
                {
                    w.write(str.get(i).writeFood() + "\n");

                }
                w.close();



            }catch (Exception e){System.out.println("error in writing");}

            //Updates upon adding item
            try {
                Scanner s = new Scanner(new File(UsernameStorage.getUserName()+ContainerNameStorage.getContainerName()+".txt"));
                str.removeAll(str);// when using an arraylist that I have used before....I remove ALL of them and then
                //the next line I will add them all back
                while (s.hasNext()) {
                    Food stu = new Food(s.nextLine(), Integer.parseInt(s.nextLine()), Integer.parseInt(s.nextLine()));
                    str.add(stu); //this will store each line
                }
                //the following creates an arraylist of buttons
                String TempID = "";
                String tempString = "";

                for (int i = 0; i < str.size(); i++)
                {
                    tempString = tempString +str.get(i).toString() + "\n";

                    // The button way
                    TempID = "food" +i;
                    Button but= new Button(str.get(i).toString());
                    but.setId(TempID);
                    inventory.add(but, 1, i);

                    Button removeBut= new Button("x");
                    inventory.add(removeBut, 0, i);


                }

            }
            catch(Exception e){System.out.println("error in reading");}


        });

        Label searchLabel = new Label("Enter name and press enter");
        TextField searchField = new TextField();

        searchField.setOnAction(value ->
        {
            String theName = searchField.getText();
            try {
                Scanner s = new Scanner(new File(UsernameStorage.getUserName()+ContainerNameStorage.getContainerName()+".txt"));
                str.removeAll(str);// when using an arraylist that I have used before....I remove ALL of them and then
                //the next line I will add them all back
                searchList.removeAll(searchList);// when using an arraylist that I have used before....I remove ALL of them and then
                //the next line I will add them all back
                while (s.hasNext()) {
                    Food stu = new Food(s.nextLine(), Integer.parseInt(s.nextLine()), Integer.parseInt(s.nextLine()));
                    str.add(stu); //this will store each line
                }

                for (int i = 0; i<str.size();i++)
                {

                    if(str.get(i).getName().contains(theName))
                    {
                        searchList.add(str.get(i));
                    }



                }


            }
            catch(Exception e){System.out.println("error in reading for textfield");}

            try{
                //the following creates an arraylist of buttons
                String TempID = "";
                String tempString = "";

                for (int i = 0; i < searchList.size(); i++)
                {
                    tempString = tempString + searchList.get(i).toString() + "\n";

                    // The button way
                    TempID = "food" +i;

                    Button but= new Button(str.get(i).toString());
                    but.setId(TempID);
                    inventory.add(but, 1, i);

                    Button removeBut= new Button("x");
                    inventory.add(removeBut, 0, i);


                }
            }catch(Exception e){System.out.println("error in writing for textfield");}
            //secondStage.show();
            fourthStage.show();



        });

        exitButton.setOnAction(value ->
        {
            try {
                LocalDateTime date = LocalDateTime.now();
                int seconds = date.toLocalTime().toSecondOfDay();
                TimeStorage.setExit(seconds);


                }
            catch(Exception e) {
                System.out.println("error in getting current time");
            }
        });

        returnButton.setOnAction(value ->
        {
            try {
                    LocalDateTime date = LocalDateTime.now();
                    int seconds = date.toLocalTime().toSecondOfDay();
                    TimeStorage.setReturn(seconds);
                }
            catch(Exception e) {
                System.out.println("error in getting current time");
            }

        });




        viewInventoryB.setOnAction(value ->
        {
            int trueTime = 0;
            try {
                Scanner s = new Scanner(new File(UsernameStorage.getUserName()+ContainerNameStorage.getContainerName()+".txt"));
                str.removeAll(str);// when using an arraylist that I have used before....I remove ALL of them and then
                //the next line I will add them all back
                while (s.hasNext()) {
                    Food stu = new Food(s.nextLine(), Integer.parseInt(s.nextLine()), Integer.parseInt(s.nextLine()));
                    trueTime = trueTime + stu.getTotal();
                    str.add(stu); //this will store each line
                }

                //the following creates an arraylist of buttons
                String TempID = "";
                String tempString = "";

                for (int i = 0; i < str.size(); i++)
                {
                    tempString = tempString +str.get(i).toString() + "\n";

                    // The button way
                    TempID = "food" +i;

                    Button but= new Button(str.get(i).toString());
                    but.setId(TempID);
                    inventory.add(but, 1, i);
                    int currentInd = i;

                    Button removeBut= new Button("x");
                    inventory.add(removeBut, 0, i);
                    removeBut.setOnAction(event -> {
                        str.remove(currentInd);
                        //Create new arraylist
                        while (s.hasNext()) {
                            Food stu = new Food(s.nextLine(), Integer.parseInt(s.nextLine()), Integer.parseInt(s.nextLine()));
                            str.add(stu); //this will store each line
                        }
                        s.close();
                        try {
                            //overrides old file
                            Writer v = new FileWriter(UsernameStorage.getUserName() + ContainerNameStorage.getContainerName()+".txt");
                            v.write("");
                            //writes into file
                            Writer w = new FileWriter(UsernameStorage.getUserName() + ContainerNameStorage.getContainerName()+".txt", true);
                            for (int j = 0; j < str.size(); j++) {
                                w.write(str.get(j).writeFood() + "\n");
                            }
                            w.close();
                            new InventoryMenu();
                            secondStage.hide();
                            primaryStage.hide();



                        } catch (Exception e) {
                            System.out.println("error in writing");
                        }

                    });


                }
                Label trueLabel = new Label("Total Time Out: " + trueTime);
                inventory.add(trueLabel,1,str.size()+1);
                inventory.add(searchLabel,1,str.size()+2);
                inventory.add(searchField,1,str.size()+3);
                inventory.add(viewChartB,1,str.size()+4);

            }
            catch(Exception e){System.out.println("error in reading for inventory");}
            secondStage.show();

        });

        secondStage.setScene(new Scene(scrollableInventory, 400, 400));

        primaryStage.setScene(new Scene(root, 400, 400));

        primaryStage.show();
    }





}
